# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b9oLf6e6y5VdDAJEbNuo23wk1MBlAUMN
"""

!pip install streamlit

import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from distutils.version import LooseVersion
from datetime import datetime
from dateutil import tz
import glob

# Define a function to process the CSV file
def process_csv(directory, fw):
 
  # path = '/content/Data/EU_IOT'
  csv_files = glob.glob(directory + "/*.csv")
  df_list = (pd.read_csv(file, dtype='unicode', index_col=0) for file in csv_files)
  df= pd.concat(df_list, ignore_index=True)

  # 0,3,4,8,9 [Customer, REV, APP, ESN, Last ID,]//+1
  df=df.iloc[:,[0,3,4,9,8]]

  df = df.rename(columns=
                {df.columns[0]: 'CUSTOMER',
                df.columns[1]: 'REV',
                df.columns[2]: 'APP',
                df.columns[3]: 'ESN',
                df.columns[4]: 'LAST ID REPORT'})
  
  df['ESN'] = df['ESN'].str.replace('\W', '', regex=True)

  #Filter Date
  df['LAST ID REPORT'] = pd.to_datetime(df['LAST ID REPORT'], utc=True).dt.tz_convert(None)
  x=[]
  td='4/26/2022 00:00:00' #change date as needed
  for i in range(len(df)):
    x.append(td)
  df['Filter Date']=pd.DataFrame(x)
  df['Filter Date']=pd.to_datetime(df['Filter Date'],format='%m/%d/%Y %H:%M:%S').dt.tz_localize(None)

  # INVENTORY: "LAST ID REPORT" is Null
  bool_series = pd.isnull(df["LAST ID REPORT"])
  blanks_df=df[bool_series]
  print("Number of Inventory devices: ", len(blanks_df))

  flag=[]
  if(len(blanks_df)>0):
    for i in range(len(blanks_df)):
      flag.append('Inventory')
    blanks_df.loc[:, 'flag'] = flag  

  # NON Blanks: "LAST ID REPORT" is not Null | Non-reporting devices
  bool_series = pd.notnull(df["LAST ID REPORT"])
  notNull_df=df[bool_series]
  print("Number of devices that reported: ", len(notNull_df))

  flag=[]
  if(len(notNull_df)>0):
    for i in range(len(notNull_df)):
      if(notNull_df['LAST ID REPORT'].iloc[i] < notNull_df['Filter Date'].iloc[i]):
        flag.append('Not Reporting')
      else:
        flag.append('Reporting')
    notNull_df.loc[:, 'flag'] = flag

  x=notNull_df[(notNull_df.flag == "Not Reporting")]
  Inactive=pd.concat([x,blanks_df])
  print("Inactives: ",len(Inactive))
  Inactive = Inactive.rename(columns={'APP': 'APP ID'})

  #Read Firmware Requirement File
  FW=pd.read_csv(fw)
  FW=FW[['APP ID', 'Frmware Version']]
  FW['APP ID'] = FW['APP ID'].astype(str)

  #Fetch required FW
  merged_df = pd.merge(Inactive, FW, on='APP ID', how='left')
  filter_edge_core=['1001','1002','1011','1021','1025','1032']
  x1 = merged_df[merged_df['APP ID'].isin(filter_edge_core)].reset_index(drop=True)
  merged_df = merged_df[~merged_df['APP ID'].isin(filter_edge_core)].reset_index(drop=True)

  #EDGE CORE Comaprison
  jump=[]
  jump_cnt=[]
  cnt=[]
  cntr1=0
  cntr2=0

  for i in range (len(x1)):
    if(LooseVersion(x1['REV'][i]) > LooseVersion(x1['Frmware Version'][i])):
      cntr1=cntr1+1
      cnt.append(cntr1)
      jump_version="No Action required"
      jump.append(jump_version)
      jmpcnt="No Action required"
      jump_cnt.append(jmpcnt)
      continue
    else:
      cntr2=cntr2+1
      cnt.append(cntr1)
      jump_version = str("x -> " + df['Frmware Version'][i])
      jump.append(jump_version)
      jmpcnt="1 Jump"
      jump_cnt.append(jmpcnt)

  x1['Jump'] = jump
  x1['Jump #'] = jump_cnt
  merged_df['Frmware Version'] = merged_df['Frmware Version'].str.replace('\W', '', regex=True)
  bool_series = pd.isnull(merged_df["Frmware Version"])
  other=merged_df[bool_series]
  bool_series = pd.notnull(merged_df["Frmware Version"])
  df=merged_df[bool_series]

  # EOL/TBD/Non-Migratable
  filter_values = ['EOL', 'TBD', 'Nonmigratable']
  xx = df[df['Frmware Version'].isin(filter_values)]
  df = df[~df['Frmware Version'].isin(filter_values)].reset_index(drop=True)
  print('Number of EOL/TBD/Non-Migratable',len(xx))
  df['APP ID'] = df['APP ID'].astype(int)

  #FW comparison
  jump=[]
  jump_cnt=[]
  cnt=[]
  cntr1=0
  cntr2=0
  cntr3=0
  cntr4=0
  cntr5=0
  cntr6=0
  cntr7=0

  for i in range(len(df)):

    # Current fw >= Min FW
    if((df['REV'][i]) >= (df['Frmware Version'][i])):
      # print(i)
      cntr1=cntr1+1
      cnt.append(cntr1)
      jump_version="No Action required"
      jump.append(jump_version)
      jmpcnt="No Action required"
      jump_cnt.append(jmpcnt)
      continue

    if((df['REV'][i]) < (df['Frmware Version'][i])):
      # Min_fw < 39t
      if((df['Frmware Version'][i]) < ('39t')):
        cntr2=cntr2+1
        cnt.append(cntr2)
        jump_version = str("x -> " + df['Frmware Version'][i])
        jump.append(jump_version)
        jmpcnt="1 Jump"
        jump_cnt.append(jmpcnt)
        continue

      # Min_fw > 39t and <42t
      if( ((df['Frmware Version'][i]) > ('39t') 
      and ((df['Frmware Version'][i]) < ('42t')))):
        
            # Current FW < 39t
            if( (df['REV'][i]) < ('39t')):
              cntr3=cntr3+1
              cnt.append(cntr3)
              jump_version = str("x -> 39t -> " + df['Frmware Version'][i])
              jump.append(jump_version)
              jmpcnt="2 Jumps"
              jump_cnt.append(jmpcnt)
              continue

            # Current FW > 39t and <42t
            if( (df['REV'][i]) > ('39t')
            and (df['REV'][i]) < ('42t')):
              cntr4=cntr4+1
              cnt.append(cntr4)
              jump_version = str("x -> " + df['Frmware Version'][i])
              jump.append(jump_version)
              jmpcnt="1 Jump"
              jump_cnt.append(jmpcnt)
              continue

      # Min_fw > 42t
      if( (df['Frmware Version'][i]) > ('42t')):

            # Current FW < 39t
            if( (df['REV'][i]) < ('39t')):
              cntr5=cntr5+1
              cnt.append(cntr5)
              jump_version = str("x -> 39t -> 42t -> " + df['Frmware Version'][i])
              jump.append(jump_version)
              jmpcnt="3 Jump"
              jump_cnt.append(jmpcnt)
              continue

            # Current FW > 39t and <42t
            if( (df['REV'][i]) >= ('39t')
            and (df['REV'][i]) < ('42t')):
              cntr6=cntr6+1
              cnt.append(cntr6)
              jump_version = str("x -> 42t -> " + df['Frmware Version'][i])
              jump.append(jump_version)
              jmpcnt="2 Jumps"
              jump_cnt.append(jmpcnt)
              continue

            # Current FW > 42t
            if( (df['REV'][i]) >= ('42t')):
              cntr7=cntr7+1
              cnt.append(cntr7)
              jump_version = str("x -> " + df['Frmware Version'][i])
              jump.append(jump_version)
              jmpcnt="1 Jump"
              jump_cnt.append(jmpcnt)
              continue

  # len(jump)
  # print(cntr1)
  # print(cntr2)
  # print(cntr3)
  # print(cntr4)
  # print(cntr5)
  # print(cntr6)
  # print(cntr7)

  df['Jump'] = jump
  df['Jump #'] = jump_cnt
  JUMPS=pd.concat([x1,df])

  pivot_df = pd.pivot_table(JUMPS, index=['CUSTOMER'], columns=['Jump'], values=['ESN'], aggfunc={'ESN': 'count'}, fill_value=0)
  # sns.heatmap(pivot_df, annot=True, cmap="crest_r",fmt='.0f',linewidths=0.5, linecolor='floralwhite')
  sns.heatmap(pivot_df, annot=True, cmap="crest_r",fmt='.0f')
  # sns.heatmap(dataset, linewidths=1, linecolor='black')
  fig, ax = plt.gcf(), plt.gca()
  fig.set_size_inches(16, 6)
  ax.set_xlabel('Jumps')
  ax.set_ylabel('Customer')
  plt.show()

  return JUMPS

# Define the Streamlit app
def app():
    st.title("Process CSV File")

    # Create a file upload component in Streamlit
    uploaded_file = st.file_uploader("Choose a CSV file", type="csv")

    # Add a file upload button
    if uploaded_file is not None:
        # Call the function to process the CSV file
        JUMPS, xx, other, pivot_df = process_csv(uploaded_file.name, "fw1.csv")

        # Display the output tables
        st.write("JUMPS:")
        st.dataframe(JUMPS)
        st.write("EOL/TBD/Non-Migratable:")
        st.dataframe(xx)
        st.write("Non Found In DevPortal:")
        st.dataframe(other)

        # Display the pivot table visualization
        st.write("Jump Pivot Table:")
        sns.heatmap(pivot_df, annot=True, cmap='crest_r', fmt='.0f')
        fig, ax = plt.gcf(), plt.gca()
        fig.set_size_inches(16, 6)
        ax.set_xlabel('Jumps')
        ax.set_ylabel('Customer')
        st.pyplot(plt.show())

# Run the app
if __name__ == '__main__':
    app()











